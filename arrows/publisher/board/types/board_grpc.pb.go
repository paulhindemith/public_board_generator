// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BoardClient is the client API for Board service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoardClient interface {
	PublishBoards(ctx context.Context, in *BoardsRequest, opts ...grpc.CallOption) (Board_PublishBoardsClient, error)
}

type boardClient struct {
	cc grpc.ClientConnInterface
}

func NewBoardClient(cc grpc.ClientConnInterface) BoardClient {
	return &boardClient{cc}
}

func (c *boardClient) PublishBoards(ctx context.Context, in *BoardsRequest, opts ...grpc.CallOption) (Board_PublishBoardsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Board_serviceDesc.Streams[0], "/board.Board/PublishBoards", opts...)
	if err != nil {
		return nil, err
	}
	x := &boardPublishBoardsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Board_PublishBoardsClient interface {
	Recv() (*BoardReply, error)
	grpc.ClientStream
}

type boardPublishBoardsClient struct {
	grpc.ClientStream
}

func (x *boardPublishBoardsClient) Recv() (*BoardReply, error) {
	m := new(BoardReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BoardServer is the server API for Board service.
// All implementations must embed UnimplementedBoardServer
// for forward compatibility
type BoardServer interface {
	PublishBoards(*BoardsRequest, Board_PublishBoardsServer) error
	mustEmbedUnimplementedBoardServer()
}

// UnimplementedBoardServer must be embedded to have forward compatible implementations.
type UnimplementedBoardServer struct {
}

func (UnimplementedBoardServer) PublishBoards(*BoardsRequest, Board_PublishBoardsServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishBoards not implemented")
}
func (UnimplementedBoardServer) mustEmbedUnimplementedBoardServer() {}

// UnsafeBoardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoardServer will
// result in compilation errors.
type UnsafeBoardServer interface {
	mustEmbedUnimplementedBoardServer()
}

func RegisterBoardServer(s grpc.ServiceRegistrar, srv BoardServer) {
	s.RegisterService(&_Board_serviceDesc, srv)
}

func _Board_PublishBoards_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BoardsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BoardServer).PublishBoards(m, &boardPublishBoardsServer{stream})
}

type Board_PublishBoardsServer interface {
	Send(*BoardReply) error
	grpc.ServerStream
}

type boardPublishBoardsServer struct {
	grpc.ServerStream
}

func (x *boardPublishBoardsServer) Send(m *BoardReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Board_serviceDesc = grpc.ServiceDesc{
	ServiceName: "board.Board",
	HandlerType: (*BoardServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishBoards",
			Handler:       _Board_PublishBoards_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "board.proto",
}
